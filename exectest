#!/bin/bash      
#  OR  #!/bin/env -i /bin/bash   # For clearing all environmental variables before running
# Script to run a casperjs based test case

# set -x  # uncomment to give script trace; not always a useful thing to do since it can botch command interpolation
# set -o errexit    # uncomment to exit immediately when command returns non-zero; stupid to do since non-zero is often not a fatal error

export app=$(basename $0)   # default application name
umask 177                   # default file permissions mask

# source $(dirname $0)/library.file.sh   # uncomment and adjust to incorporate external script; recommend to use shell functions

# Send a message to stderr and exit with non-zero error code
# 
function ferror() {
  if [[ ! -z "$1" ]]
  then
    echo $1 >&2
  fi
  exit 1
}

# Best practice: write most of the usage out before writing the rest of the script
function fusage() {
  if [[ ! -z "$1" ]]
  then
    echo $1 >&2
  fi
  cat <<EOT
$app: run a casperjs based test case
Usage: $app --case testcasename [-a "USERNAME=foo" [-a "PASSWORD=bar"] ...] [--open] [--nop]
       $app -h|--help
       $app -v|--view testcasename
       $app -l|--list testcasename
       $app -e|--edit testcasename
       $app -k|--config
       $app -x|--clean

Where 
  -c | --case  runs casper against ./testsuite/testcasename.coffee; required

  -o | --open  open a screenshot of session upon test failure; optional

  -n | --nop   "No Operation" - prevents anything from happening, echoes the steps to be taken; optional

  -a | --scriptarg Shell variables to put into the environment; optional; use as many as needed

Other options
  -h | --help  Output this message

  -v | --view  Views test case output

  -l | --list  Lists any test cases matching expression testcasename

  -k | --config Edits pretest.coffee, a shortcut to --edit pretest.coffee

  -e | --edit  Edits any test cases matching expression testcasename

  -x | --clean Removes any testout files (destructive!)


Description
$app executes one or more tests with casperjs and logs the results

Tests are assumed to be written in coffeescript, with the suffix ".coffee"

testcasename is a pattern which will be expanded to possibly multiple cases.
If the pattern does not end with '.coffee', this will be appended before the match.

The -e and -k options use MacVim by default. Set and export the EDITOR shell variable to override.

Example

  $app --case some_test_case --open 

  $app --case optional_other_inputs       \
    -a 'TESTHOST="dev.wolftech.ncsu.edu"' \
    -a 'USERNAME="staging"'               \
    -a 'PASSWORD="DF459A91D14A110E"'

Handling Auth Info and Other Parameters

   The CasperJS test runner does not accept optional arguments at this time.
   The workaround for the moment is to put test configuration provisioning into a pretest.coffee file.

   To keep sensitive info out of files, set environmental variables just before you run tests.
   To access these variables, put lines like the following into pretest.coffee:

   var system = require('system'); 
   var username = system.env.USERNAME; 
   var password = system.env.PASSWORD; 

   Boo provides the -a option as syntactic sugar for setting variables.

Environmental Variables
   testfile    ... the filename or pattern passed to the --case argument; this is set when boo runs casperjs
   outputdir   ... the path where test log output and snapshots are stored

Limitations

  Tests are assumed to be located in ./testsuite/ 

  Test output is assumed to be located in ./testout/ 

  No attempt is made to keep history of old test runs. 


  Due to the way this script parses command lines, the -a arguments cannot include spaces.
  To get around this in bash, export the variable prior to running boo:
    export SOMETHING="value"
EOT



}

function sig_interrupt() {
  # ferror "Caught SIGINT"
  true
}

function sig_hup() {
  # ferror "Caught SIGHUP"
  true
}

function sig_quit() {
  # ferror "Caught SIGQUIT"
  true
}

function sig_terminate() {
  # ferror "Caught SIGTERM"
  true
}

function sig_exit() {
  # ferror "Caught SIGEXIT"
  true
}

function sig_untrap() {
  trap - HUP INT QUIT TERM
}

function sig_cleanup_or_rollback() {
  # Remove files that shouldn't be left around
  sig_untrap
}

trap sig_interrupt   INT
trap sig_quit        QUIT
trap sig_hup         HUP
trap sig_terminate   TERM
trap sig_exit        EXIT
trap sig_cleanup_or_rollback     HUP INT QUIT TERM 

# Available signals to trap
#  1) SIGHUP   2) SIGINT   3) SIGQUIT  4) SIGILL   5) SIGTRAP  6) SIGABRT  7) SIGEMT  8) SIGFPE   
# 10) SIGBUS  11) SIGSEGV 12) SIGSYS  13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGURG 18) SIGTSTP 
# 20) SIGCHLD 21) SIGTTIN 22) SIGTTOU 23) SIGIO 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGINFO 
# 30) SIGUSR1 31) SIGUSR2
# Not available: 9) SIGKILL  17) SIGSTOP 19) SIGCONT 

function Main() {
  # Baseline default settings so defaults cannot be imported accidentally
  local ECHODBG=''
  local open="false"
  local scriptargs=''
  local testcase=''
  local outputdir="./testout"
  local verbose=false

  local opendefault=${ExectestOpenDefault:-'false'}   # import default via shell variable 
  local casedefault=''
  local scriptargsdefault='TESTHOST=dev.wolftech.ncsu.edu'

  # declare -a array_variable                      # Dereference as ${array_variable[nn]}
  # array_var2=( [0]="elem1" "eel2" "..." "eeelN" )# Dereference as ${array_var2[nn]}, ${array_var2[*]}, ${array_var2[@]}
  # length=${#array_var2[@]}                       # get length of array
  # length=${#array_var2[0]}                       # get length of first element of array

  # Variable interpolation
  # ${array_var[@]#e*1}      # Matches "elem1" against all elements and removes it.
  # ${varx##e*}      # Longest match from front of string(s)
  # ${varx%l[0-9]}   # Shortest match from back of string(s)
  # ${varx%%l[0-9]*} # Longest match from back of string(s)
  # ${varx/el/EL}    # replace first occurrence of substring
  # ${varx//el/EL}   # replace occurrences of substring
  # ${varx//EL/}     # delete occurrences of substring
  # ${varx/#e/ELEM/}     # replace leftmost occurrence of substring
  # ${varx/%N/n/}     # replace rightmost occurrence of substring

  # Variable math
  # let "varname *= 3"   # multiplication; += addition; %= modulus;
  # let varname=varname+1 ; let "varname = varname + 1"
  # ((varname+=1))
  # varname=$(($varname+1)); varname=(($varname+1)); varname=((varname+1))

  while [[ ! -z "$1" ]]
  do
    case "$1" in 

    "--verbose") 
      export verbose=true
    ;;

    "-h"|"--help")
      fusage
      exit 0
    ;;

    "-n"|"--nop") 
      export ECHODBG="echo"
     ;;

    "-c"|"--case")
       if [[ -z "$2" ]]
       then
         ferror "--case missing testcasename argument"
       fi
       testcase="$2"
       shift
    ;;

    "-a"|"--scriptarg")
       if [[ -z "$2" ]]
       then
         ferror "--scriptarg missing argument"
       fi
       scriptargs="$scriptargs $2"
       shift
    ;;
      
    "-v"|"--view")
       if [[ -z "$2" ]]
       then
         ferror "--view missing argument"
       fi
      less $outputdir/$2
      exit 0
    ;;

    "-l"|"--list")
      shift
      export args="$*" 
      (cd testsuite; ls $args)
      exit 0
    ;;

    "-k"|"--config")
      shift
      exec ${EDITOR:-mvim --remote-tab } testsuite/pretest.coffee
    ;;

    "-e"|"--edit")
      shift
      exec ${EDITOR:-mvim --remote-tab } testsuite/$*
    ;;

    "-x"|"--clean")
      cd $outputdir
      rm *.txt *.png
      git checkout .
      exit 0
    ;;

    "-o"|"--open")
       open="true"
    ;;
      
    *)   # handle other arguments
      ferror "Unexpected argument! Bailing out..."
    ;;
      
    esac
    shift
  done

  # Sometimes it is useful to have a default-default and to
  # use conditional logic for computing default after all options have been parsed
  # So here we check arguments to realize the final default overrides
  open=${open:-$opendefault}
  scriptargs="${scriptargs:-$scriptargsdefault}"
  testcase=${testcase:-$casedefault}
  site=${site:-$sitedefault}
  testfile="./testsuite/${testcase}"
  if [[ "$testfile" != *.coffee ]]
  then
    testfile="./testsuite/${testcase}.coffee"
  fi
  snapshotfile="$outputdir/${testcase}.coffee.png"

  if [[ -z "$testcase" ]]
  then
    ferror "--case 'testcase' is a required argument." 
  fi

  if [[ "$testfile" != *\** ]]
  then
    if [[ ! -f "$testfile" ]]
    then
      ferror "'$testfile' is not a readable file." 
    fi
  fi

  if [[ ! -e $outputdir ]]
  then
    mkdir $outputdir 2>/dev/null
    chmod ugo+rwx $outputdir 2>/dev/null
  else
    if [[ ! -d $outputdir ]]
    then
      ferror "$outputdir exists already and is not a directory"
    fi
  fi

  if [[ "$ECHODBG" = "echo" ]]
  then
    $ECHODBG "export testfile outputdir"
    $ECHODBG -n 'bash --restricted -c "$scriptargs; '
    $ECHODBG "casperjs test $testfile \
      --ignore-ssl-errors=yes \
      --pre=./testsuite/pretest.coffee  \
      --post=./testsuite/posttest.coffee \
      --includes=./testsuite/eachtest.coffee\" 2>&1 | tee \${outputdir}/\$(basename \$testfile).\$(date +%m%d%y.%H%M).txt"
  else
    export testfile outputdir
    if $open
    then
      /bin/rm "$snapshotfile" 2>/dev/null
    fi

      # casperjs test $testfile --includes=foo.js,bar.js --pre=pre-test.js  --post=post-test.js \
      # --direct  --log-level=debug  --fail-fast  
      # or just pass ./testsuite/ directory
    bash --ignore-ssl-errors=yes --restricted -c "$scriptargs; casperjs test  $testfile \\
      --pre=./testsuite/pretest.coffee  \\
      --post=./testsuite/posttest.coffee \\
      --includes=./testsuite/eachtest.coffee
    " 2>&1 | tee ${outputdir}/$(basename $testfile).$(date +%m%d%y.%H%M).txt

    if $open && test -f "$snapshotfile"
    then
      open "$snapshotfile"
    fi
  fi

  if $verbose
  then
    $ECHODBG find $outputdir -name "*.txt" -mtime -5m
  fi

  sig_untrap
}

# Invoke main module
Main $*
